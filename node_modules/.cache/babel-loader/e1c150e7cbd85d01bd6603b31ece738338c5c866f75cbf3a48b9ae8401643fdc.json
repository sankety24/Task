{"ast":null,"code":"import * as types from \"./actionType\";\nimport axios from \"axios\";\nconst getMusicRecordRequest = () => {\n  return {\n    type: types.GET_MUSIC_RECORD_REQUEST\n  };\n};\nexport const getMusicRecord = queryParams => dispatch => {\n  dispatch(getMusicRecordRequest);\n  return axios.get(`http://localhost:8080/albums`, queryParams).then(r => {\n    dispatch({\n      type: types.GET_MUSIC_RECORD_SUCCESS,\n      payload: r.data\n    });\n    // console.log(r.data)\n  }).catch(e => {\n    dispatch({\n      type: types.GET_MUSIC_RECORD_FAILURE\n    });\n  });\n};\nexport const updateMusicRecord = (id, payload) => dispatch => {\n  dispatch({\n    type: types.UPDATE_MUSIC_RECORD_REQUEST\n  });\n  return axios.patch(`http://localhost:8080/albums/${id}`, payload).then(r => {\n    dispatch({\n      type: types.UPDATE_MUSIC_RECORD_SUCCESS\n    });\n  }).catch(e => {\n    dispatch({\n      type: types.UPDATE_MUSIC_RECORD_FAILURE\n    });\n  });\n};","map":{"version":3,"names":["types","axios","getMusicRecordRequest","type","GET_MUSIC_RECORD_REQUEST","getMusicRecord","queryParams","dispatch","get","then","r","GET_MUSIC_RECORD_SUCCESS","payload","data","catch","e","GET_MUSIC_RECORD_FAILURE","updateMusicRecord","id","UPDATE_MUSIC_RECORD_REQUEST","patch","UPDATE_MUSIC_RECORD_SUCCESS","UPDATE_MUSIC_RECORD_FAILURE"],"sources":["/home/sanket/Downloads/Task/Task/src/Redux/AppReducer/action.js"],"sourcesContent":["import * as types from \"./actionType\";\nimport axios from \"axios\";\n\nconst getMusicRecordRequest = () => {\n  return {\n    type: types.GET_MUSIC_RECORD_REQUEST,\n  };\n};\n\nexport const getMusicRecord =(queryParams)=>(dispatch) => {\n  dispatch(getMusicRecordRequest);\n\n  return axios\n    .get(`http://localhost:8080/albums`,queryParams)\n    .then((r) => {\n      dispatch({\n        type: types.GET_MUSIC_RECORD_SUCCESS,\n        payload: r.data,\n      });\n      // console.log(r.data)\n    })\n    .catch((e) => {\n      dispatch({ type: types.GET_MUSIC_RECORD_FAILURE });\n    });\n};\n\n\nexport const updateMusicRecord=(id,payload)=>dispatch=>{\n  dispatch({type:types.UPDATE_MUSIC_RECORD_REQUEST})\n  return axios.patch(`http://localhost:8080/albums/${id}`,payload).then(r=>{\n    dispatch({type:types.UPDATE_MUSIC_RECORD_SUCCESS})\n  }).catch(e=>{\n    dispatch({type:types.UPDATE_MUSIC_RECORD_FAILURE})\n  })\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,cAAc;AACrC,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,qBAAqB,GAAG,MAAM;EAClC,OAAO;IACLC,IAAI,EAAEH,KAAK,CAACI;EACd,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,cAAc,GAAGC,WAAW,IAAIC,QAAQ,IAAK;EACxDA,QAAQ,CAACL,qBAAqB,CAAC;EAE/B,OAAOD,KAAK,CACTO,GAAG,CAAE,8BAA6B,EAACF,WAAW,CAAC,CAC/CG,IAAI,CAAEC,CAAC,IAAK;IACXH,QAAQ,CAAC;MACPJ,IAAI,EAAEH,KAAK,CAACW,wBAAwB;MACpCC,OAAO,EAAEF,CAAC,CAACG;IACb,CAAC,CAAC;IACF;EACF,CAAC,CAAC,CACDC,KAAK,CAAEC,CAAC,IAAK;IACZR,QAAQ,CAAC;MAAEJ,IAAI,EAAEH,KAAK,CAACgB;IAAyB,CAAC,CAAC;EACpD,CAAC,CAAC;AACN,CAAC;AAGD,OAAO,MAAMC,iBAAiB,GAAC,CAACC,EAAE,EAACN,OAAO,KAAGL,QAAQ,IAAE;EACrDA,QAAQ,CAAC;IAACJ,IAAI,EAACH,KAAK,CAACmB;EAA2B,CAAC,CAAC;EAClD,OAAOlB,KAAK,CAACmB,KAAK,CAAE,gCAA+BF,EAAG,EAAC,EAACN,OAAO,CAAC,CAACH,IAAI,CAACC,CAAC,IAAE;IACvEH,QAAQ,CAAC;MAACJ,IAAI,EAACH,KAAK,CAACqB;IAA2B,CAAC,CAAC;EACpD,CAAC,CAAC,CAACP,KAAK,CAACC,CAAC,IAAE;IACVR,QAAQ,CAAC;MAACJ,IAAI,EAACH,KAAK,CAACsB;IAA2B,CAAC,CAAC;EACpD,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}